Zombie Rails 2

Level 1

Database variable types in rails
string
text
integer
boolean
decimal
float
binary
date
time
datetime


Migration option 
default: value
limit: 30
null: false
first: true
after: :email
unique: true


Add or remove columns to tables
rails g migration add<columns>to<table> name:value
rails g migration Remove<Anything>From<Table name> name:value

Migration commands
rename_column :table, :old_column, :new_column
rename_table  :old_table, :new_table
drop_table	:table
change_column :table, :column, :type, :option
change_column_default :table, :column, default: true
remove_column :table, :column
add_column :table, :column, :type, :option

rake 
rake db:setup -- create db, load schema, run seed
========================================================

Level 2

1  Write a scope on the Tweet model called recent which returns the 4 most recent tweets. Hint: You'll need an order AND a limit scope.

class Tweet < ActiveRecord::Base
  scope :recent, order("created_at desc").limit(4)
end


2  Write another scope called graveyard which only shows tweets where the show_location column is true and the location is "graveyard"

class Tweet < ActiveRecord::Base
  scope :recent, order('created_at desc').limit(4) 
  scope :graveyard, where(show_location: true, location: 'graveyard')
end


3  In this controller action create an instance variable called @graveyard_tweets which uses both of the two scopes recent and graveyard together.

class TweetsController < ApplicationController
  def index
    @tweets = Tweet.all
    @graveyard_tweets = Tweet.recent.graveyard
  end
end


4  Create a before_save callback that checks to see if a tweet has a location, if it does have a location then set show_location to true.
Tip: You can check to see if location exists with if self.location?

class Tweet < ActiveRecord::Base
  before_save :set_show_location
  
  def set_show_location
    self.show_location = true if self.location? #self.location this self is optional
  end
end


5  Add callbacks so the appropriate log function is called after an update and destroy.

class Tweet < ActiveRecord::Base
  after_update :log_update
  after_destroy :log_destroy

  def log_update
    logger.info "Tweet #{id} updated"
  end

  def log_destroy
    logger.info "Tweet #{id} deleted"
  end
end


6 Instead of storing location inside the Tweet model, let's instead break it out into a separate table (as you see below). In this case we want to define that a Tweet can have one Location, and a Location belongs to a Tweet. Fill out the models below accordingly.

class Tweet < ActiveRecord::Base
  has_one :location
end

class Location < ActiveRecord::Base
  belongs_to :tweet
end


****************Pay attendtion of foreign_key*************
7 OH NO! Our Database Admin turned into a Zombie and decided to rename the belongs_to field in our locations table tweeter_id instead of the intelligent default tweet_id. We're going to slay him and correct this, but in the meantime set the foreign_key on both relationships to tweeter_id. Also set the dependency so when a tweet is destroyed, the location is destroyed as well.

class Tweet < ActiveRecord::Base
  has_one :location, dependent: :destroy, foreign_key: :tweeter_id
end

class Location < ActiveRecord::Base
  belongs_to :tweet, foreign_key: :tweeter_id
end


8  We're going to be iterating through many tweets and printing out their location. Refactor the controller code below to use the includes method.

class TweetsController < ApplicationController 
  def index
    @tweets = Tweet.recent.includes(:location).all
  end
end


9  A Tweet can belong to one or more Categories (e.g. eating flesh, walking dead, searching for brains). Write a migration that creates two tables, categories, and categorizations. Give categories one column named name of type string; and give categorizations two integer columns: tweet_id and category_id.

class AddTweetCategories < ActiveRecord::Migration
  def change
    create_table :categories do |t|
      t.string :name
    end
    
    create_table :categorizations do |t|
      t.integer :tweet_id
      t.integer :category_id
    end
  end 
end


10 Now that we have our new tables, it's time to define the relationships between each of the models. Define the has_many through relationships in the Tweet & Category model and the belongs_to relationships in the Categorization model.

class Tweet < ActiveRecord::Base
  has_many :categorizations
  has_many :categories, through: :categorizations
end

class Categorization < ActiveRecord::Base
  belongs_to :tweet
  belongs_to :category
end

class Category < ActiveRecord::Base
  has_many :categorizations
  has_many :tweets, through: :categorizations
end
